"use strict"; /* istanbul ignore next */var cov_ead0dhwop = function () {var path = "/code/cilantro/iogates-transfer/src/types/uploadResponse.ts",hash = "2e472bf70818e22e07338a59a039cc5f8954e5e2",global = new Function('return this')(),gcv = "__coverage__",coverageData = { path: "/code/cilantro/iogates-transfer/src/types/uploadResponse.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 8, column: 8 }, end: { line: 14, column: 11 } }, "2": { start: { line: 10, column: 12 }, end: { line: 10, column: 29 } }, "3": { start: { line: 11, column: 12 }, end: { line: 11, column: 29 } }, "4": { start: { line: 12, column: 12 }, end: { line: 12, column: 32 } }, "5": { start: { line: 13, column: 12 }, end: { line: 13, column: 24 } }, "6": { start: { line: 17, column: 0 }, end: { line: 17, column: 40 } } }, fnMap: { "0": { name: "(anonymous_0)", decl: { start: { line: 7, column: 4 }, end: { line: 7, column: 5 } }, loc: { start: { line: 7, column: 37 }, end: { line: 15, column: 5 } }, line: 7 }, "1": { name: "(anonymous_1)", decl: { start: { line: 9, column: 18 }, end: { line: 9, column: 19 } }, loc: { start: { line: 9, column: 24 }, end: { line: 14, column: 9 } }, line: 9 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0 }, f: { "0": 0, "1": 0 }, b: {}, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();++cov_ead0dhwop.s[0];
Object.defineProperty(exports, "__esModule", { value: true });
/**
                                                                * Exports UploadResponse class
                                                                */
class UploadResponse {
    fromPromise(promise, file, dest) {/* istanbul ignore next */++cov_ead0dhwop.f[0];++cov_ead0dhwop.s[1];
        return promise.
        then(() => {/* istanbul ignore next */++cov_ead0dhwop.f[1];++cov_ead0dhwop.s[2];
            this.dest = dest; /* istanbul ignore next */++cov_ead0dhwop.s[3];
            this.file = file; /* istanbul ignore next */++cov_ead0dhwop.s[4];
            this.success = true; /* istanbul ignore next */++cov_ead0dhwop.s[5];
            return this;
        });
    }} /* istanbul ignore next */++cov_ead0dhwop.s[6];

exports.UploadResponse = UploadResponse;
//# sourceMappingURL=uploadResponse.js.map
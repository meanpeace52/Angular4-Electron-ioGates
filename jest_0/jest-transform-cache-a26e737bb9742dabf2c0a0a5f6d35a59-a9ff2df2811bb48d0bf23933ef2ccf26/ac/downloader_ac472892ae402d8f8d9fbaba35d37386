"use strict"; /* istanbul ignore next */var cov_29h5wbidje = function () {var path = "/code/cilantro/iogates-transfer/src/lib/downloader.ts",hash = "75c9f194c23ab32431cd2374cbfed65826a5d327",global = new Function('return this')(),gcv = "__coverage__",coverageData = { path: "/code/cilantro/iogates-transfer/src/lib/downloader.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 3, column: 16 }, end: { line: 3, column: 32 } }, "2": { start: { line: 4, column: 24 }, end: { line: 4, column: 48 } }, "3": { start: { line: 5, column: 13 }, end: { line: 5, column: 26 } }, "4": { start: { line: 6, column: 10 }, end: { line: 6, column: 26 } }, "5": { start: { line: 15, column: 24 }, end: { line: 18, column: 9 } }, "6": { start: { line: 19, column: 31 }, end: { line: 19, column: 59 } }, "7": { start: { line: 20, column: 27 }, end: { line: 20, column: 64 } }, "8": { start: { line: 24, column: 37 }, end: { line: 27, column: 65 } }, "9": { start: { line: 28, column: 34 }, end: { line: 28, column: 86 } }, "10": { start: { line: 32, column: 34 }, end: { line: 39, column: 19 } }, "11": { start: { line: 33, column: 59 }, end: { line: 36, column: 9 } }, "12": { start: { line: 43, column: 20 }, end: { line: 46, column: 33 } }, "13": { start: { line: 47, column: 8 }, end: { line: 47, column: 47 } }, "14": { start: { line: 50, column: 8 }, end: { line: 50, column: 62 } }, "15": { start: { line: 53, column: 0 }, end: { line: 53, column: 32 } } }, fnMap: { "0": { name: "(anonymous_0)", decl: { start: { line: 13, column: 4 }, end: { line: 13, column: 5 } }, loc: { start: { line: 13, column: 29 }, end: { line: 48, column: 5 } }, line: 13 }, "1": { name: "(anonymous_1)", decl: { start: { line: 33, column: 41 }, end: { line: 33, column: 42 } }, loc: { start: { line: 33, column: 59 }, end: { line: 36, column: 9 } }, line: 33 }, "2": { name: "(anonymous_2)", decl: { start: { line: 49, column: 4 }, end: { line: 49, column: 5 } }, loc: { start: { line: 49, column: 28 }, end: { line: 51, column: 5 } }, line: 49 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0 }, f: { "0": 0, "1": 0, "2": 0 }, b: {}, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();++cov_29h5wbidje.s[0];
Object.defineProperty(exports, "__esModule", { value: true });
const muxer_1 = /* istanbul ignore next */(++cov_29h5wbidje.s[1], require("muxer"));
const MultiDownloader = /* istanbul ignore next */(++cov_29h5wbidje.s[2], require("mt-downloader"));
const rx_1 = /* istanbul ignore next */(++cov_29h5wbidje.s[3], require("rx"));
const R = /* istanbul ignore next */(++cov_29h5wbidje.s[4], require("ramda"));
/**
                                                                                * Helps download a file from IOGates
                                                                                */
class Downloader {
    // public downloadFiles(files: Type.File[], dest: string) {
    // }
    downloadFile(file, dest) {/* istanbul ignore next */++cov_29h5wbidje.f[0];
        // do something.
        const options = /* istanbul ignore next */(++cov_29h5wbidje.s[5], {
            url: file.download,
            path: dest });

        const createMTDFile$ = /* istanbul ignore next */(++cov_29h5wbidje.s[6], this.createDownload(options));
        const [{ fdW$ }] = /* istanbul ignore next */(++cov_29h5wbidje.s[7], muxer_1.demux(createMTDFile$, 'fdW$'));
        /**
                                                                                                                      * Download From MTD File
                                                                                                                      */
        const downloadFromMTDFile$ = /* istanbul ignore next */(++cov_29h5wbidje.s[8], createMTDFile$.
        last().
        map(MultiDownloader.MTDPath(options.path)).
        flatMap(MultiDownloader.DownloadFromMTDFile).share());
        const [{ fdR$, meta$ }] = /* istanbul ignore next */(++cov_29h5wbidje.s[9], muxer_1.demux(downloadFromMTDFile$, 'meta$', 'fdR$'));
        /**
                                                                                                                                            * Finalize Downloaded FILE
                                                                                                                                            */
        const finalizeDownload$ = /* istanbul ignore next */(++cov_29h5wbidje.s[10], downloadFromMTDFile$.last().
        withLatestFrom(fdR$, meta$, (_, fd, meta) => {/* istanbul ignore next */++cov_29h5wbidje.f[1];++cov_29h5wbidje.s[11];return {
                fd$: rx_1.Observable.just(fd),
                meta$: rx_1.Observable.just(meta) };
        }).
        flatMap(MultiDownloader.FinalizeDownload).
        share().
        last());
        /**
                  * Close File Descriptors
                  */
        const fd$ = /* istanbul ignore next */(++cov_29h5wbidje.s[12], finalizeDownload$.
        withLatestFrom(fdW$, fdR$).
        map(R.tail).
        flatMap(R.map(R.of))); /* istanbul ignore next */++cov_29h5wbidje.s[13];
        return MultiDownloader.FILE.close(fd$);
    }
    createDownload(options) {/* istanbul ignore next */++cov_29h5wbidje.f[2];++cov_29h5wbidje.s[14];
        return MultiDownloader.CreateMTDFile(options).share();
    }} /* istanbul ignore next */++cov_29h5wbidje.s[15];

exports.Downloader = Downloader;
//# sourceMappingURL=downloader.js.map
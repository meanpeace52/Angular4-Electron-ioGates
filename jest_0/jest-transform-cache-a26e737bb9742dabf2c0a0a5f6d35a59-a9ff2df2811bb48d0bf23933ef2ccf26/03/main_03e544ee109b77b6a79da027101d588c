"use strict"; /* istanbul ignore next */var cov_2cqn5mmo0p = function () {var path = "/code/cilantro/iogates-transfer/src/main.ts",hash = "2377b3c904d6232c60ff8cf24e53658f29ab6f8e",global = new Function('return this')(),gcv = "__coverage__",coverageData = { path: "/code/cilantro/iogates-transfer/src/main.ts", statementMap: { "0": { start: { line: 2, column: 0 }, end: { line: 2, column: 62 } }, "1": { start: { line: 3, column: 15 }, end: { line: 3, column: 32 } }, "2": { start: { line: 4, column: 19 }, end: { line: 4, column: 49 } }, "3": { start: { line: 5, column: 15 }, end: { line: 5, column: 45 } }, "4": { start: { line: 6, column: 16 }, end: { line: 6, column: 47 } }, "5": { start: { line: 7, column: 31 }, end: { line: 7, column: 62 } }, "6": { start: { line: 8, column: 18 }, end: { line: 14, column: 2 } }, "7": { start: { line: 15, column: 0 }, end: { line: 30, column: 3 } }, "8": { start: { line: 18, column: 4 }, end: { line: 18, column: 54 } }, "9": { start: { line: 19, column: 21 }, end: { line: 19, column: 29 } }, "10": { start: { line: 20, column: 4 }, end: { line: 23, column: 43 } }, "11": { start: { line: 24, column: 4 }, end: { line: 27, column: 29 } }, "12": { start: { line: 28, column: 4 }, end: { line: 28, column: 42 } }, "13": { start: { line: 29, column: 4 }, end: { line: 29, column: 30 } } }, fnMap: { "0": { name: "(anonymous_0)", decl: { start: { line: 17, column: 10 }, end: { line: 17, column: 11 } }, loc: { start: { line: 17, column: 16 }, end: { line: 30, column: 1 } }, line: 17 } }, branchMap: {}, s: { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0 }, f: { "0": 0 }, b: {}, _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c" },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();++cov_2cqn5mmo0p.s[0];
Object.defineProperty(exports, "__esModule", { value: true });
const vorpal = /* istanbul ignore next */(++cov_2cqn5mmo0p.s[1], require("vorpal"));
const download_1 = /* istanbul ignore next */(++cov_2cqn5mmo0p.s[2], require("./commands/download"));
const file_1 = /* istanbul ignore next */(++cov_2cqn5mmo0p.s[3], require("./types/models/file"));
const share_1 = /* istanbul ignore next */(++cov_2cqn5mmo0p.s[4], require("./types/models/share"));
const sequelize_typescript_1 = /* istanbul ignore next */(++cov_2cqn5mmo0p.s[5], require("sequelize-typescript"));
const sequelize = /* istanbul ignore next */(++cov_2cqn5mmo0p.s[6], new sequelize_typescript_1.Sequelize({
    name: 'iogates',
    dialect: 'sqlite',
    username: 'root',
    password: '',
    storage: `${__dirname}/iogates.sqlite` })); /* istanbul ignore next */++cov_2cqn5mmo0p.s[7];

sequelize.
sync().
then(() => {/* istanbul ignore next */++cov_2cqn5mmo0p.f[0];++cov_2cqn5mmo0p.s[8];
    sequelize.addModels([file_1.File, share_1.Share]);
    const commands = /* istanbul ignore next */(++cov_2cqn5mmo0p.s[9], vorpal()); /* istanbul ignore next */++cov_2cqn5mmo0p.s[10];
    commands.
    command('download [dir] [url]', 'Download folder from Share URL').
    option('-m', '--monitor', 'Shows download progress').
    action(download_1.downloadComand); /* istanbul ignore next */++cov_2cqn5mmo0p.s[11];
    commands.
    delimiter('iogates>').
    show().
    parse(process.argv); /* istanbul ignore next */++cov_2cqn5mmo0p.s[12];
    commands.commands = commands.commands; /* istanbul ignore next */++cov_2cqn5mmo0p.s[13];
    module.exports = commands;
});
//# sourceMappingURL=main.js.map